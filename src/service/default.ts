/**
 * Generated by orval v6.6.0 üç∫
 * Do not edit manually.
 * Next Swagger API Example
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import { useAxios } from "../useAxios";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * Gets all groups in the system
 */
export const useGetApiGroupsHook = () => {
  const getApiGroups = useAxios<void>();

  return () => {
    return getApiGroups({ url: `/api/groups`, method: "get" });
  };
};

export const getGetApiGroupsQueryKey = () => [`/api/groups`];

export const useGetApiGroups = <
  TData = AsyncReturnType<ReturnType<typeof useGetApiGroupsHook>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    AsyncReturnType<ReturnType<typeof useGetApiGroupsHook>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetApiGroupsQueryKey();

  const getApiGroups = useGetApiGroupsHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetApiGroupsHook>>
  > = () => getApiGroups();

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetApiGroupsHook>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * Gets all the users of the application
 */
export const useGetApiUsersIdHook = () => {
  const getApiUsersId = useAxios<void>();

  return (id?: string) => {
    return getApiUsersId({ url: `/api/users/${id}`, method: "get" });
  };
};

export const getGetApiUsersIdQueryKey = (id?: string) => [`/api/users/${id}`];

export const useGetApiUsersId = <
  TData = AsyncReturnType<ReturnType<typeof useGetApiUsersIdHook>>,
  TError = unknown
>(
  id?: string,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useGetApiUsersIdHook>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

  const getApiUsersId = useGetApiUsersIdHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetApiUsersIdHook>>
  > = () => getApiUsersId(id);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetApiUsersIdHook>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

/**
 * Gets all the users of the application
 */
export const useGetApiUsersHook = () => {
  const getApiUsers = useAxios<void>();

  return () => {
    return getApiUsers({ url: `/api/users`, method: "get" });
  };
};

export const getGetApiUsersQueryKey = () => [`/api/users`];

export const useGetApiUsers = <
  TData = AsyncReturnType<ReturnType<typeof useGetApiUsersHook>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    AsyncReturnType<ReturnType<typeof useGetApiUsersHook>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersQueryKey();

  const getApiUsers = useGetApiUsersHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetApiUsersHook>>
  > = () => getApiUsers();

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetApiUsersHook>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};
